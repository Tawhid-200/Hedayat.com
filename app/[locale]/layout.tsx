import type { Metadata } from "next";
import { NextIntlClientProvider, hasLocale } from "next-intl";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";
import { Geist, Geist_Mono } from "next/font/google";
import { ThemeProvider } from "@/providers/Theme_Provider";
import "./globals.css";
import { setRequestLocale } from "next-intl/server";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Hedayat",
  description: "Generated by create next app",
  icons: {
    icon: [
      {
        url: "/icon/icon.png",
      },
    ],
  },
};

export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  const { locale } = await params;
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  setRequestLocale(locale);

  return (
    <html lang={locale} suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="dark"
          enableSystem
          disableTransitionOnChange
          value={{
            light: "light",
            dark: "dark",
            // serenity: "serenity",
            // serenity_dark: "serenity_dark",
            // forest: "forest",
            // forest_dark: "forest_dark",
            // sage: "sage",
            // sage_dark: "sage_dark",
            // earth: "earth",
            // earth_dark: "earth_dark",
            // lunar: "lunar",
            // lunar_dark: "lunar_dark",
            // ocean: "ocean",
            // ocean_dark: "ocean_dark",
            // vintage: "vintage",
            // vintage_dark: "vintage_dark",
            // pure: "pure",
            // pure_dark: "pure_dark",
          }}
        >
          <NextIntlClientProvider>{children}</NextIntlClientProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
